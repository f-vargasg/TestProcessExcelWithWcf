//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinTestService.TransfFilesSrvRef2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TransfFilesSrvRef2.ITransferFileService")]
    public interface ITransferFileService {
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que el nombre de contenedor (DownloadRequest) del mensaje DownloadRequest no coincide con el valor predeterminado (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferFileService/DownloadFile", ReplyAction="http://tempuri.org/ITransferFileService/DownloadFileResponse")]
        WinTestService.TransfFilesSrvRef2.RemoteFileInfo DownloadFile(WinTestService.TransfFilesSrvRef2.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferFileService/DownloadFile", ReplyAction="http://tempuri.org/ITransferFileService/DownloadFileResponse")]
        System.Threading.Tasks.Task<WinTestService.TransfFilesSrvRef2.RemoteFileInfo> DownloadFileAsync(WinTestService.TransfFilesSrvRef2.DownloadRequest request);
        
        // CODEGEN: Se está generando un contrato de mensaje, ya que la operación UploadFile no es RPC ni está encapsulada en un documento.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferFileService/UploadFile", ReplyAction="http://tempuri.org/ITransferFileService/UploadFileResponse")]
        WinTestService.TransfFilesSrvRef2.UploadFileResponse UploadFile(WinTestService.TransfFilesSrvRef2.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferFileService/UploadFile", ReplyAction="http://tempuri.org/ITransferFileService/UploadFileResponse")]
        System.Threading.Tasks.Task<WinTestService.TransfFilesSrvRef2.UploadFileResponse> UploadFileAsync(WinTestService.TransfFilesSrvRef2.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferFileService/StoreToDb", ReplyAction="http://tempuri.org/ITransferFileService/StoreToDbResponse")]
        bool StoreToDb(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferFileService/StoreToDb", ReplyAction="http://tempuri.org/ITransferFileService/StoreToDbResponse")]
        System.Threading.Tasks.Task<bool> StoreToDbAsync(string filename);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Filename;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string Filename) {
            this.Filename = Filename;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Filename;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string Filename, long Length, System.IO.Stream FileByteStream) {
            this.Filename = Filename;
            this.Length = Length;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransferFileServiceChannel : WinTestService.TransfFilesSrvRef2.ITransferFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferFileServiceClient : System.ServiceModel.ClientBase<WinTestService.TransfFilesSrvRef2.ITransferFileService>, WinTestService.TransfFilesSrvRef2.ITransferFileService {
        
        public TransferFileServiceClient() {
        }
        
        public TransferFileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransferFileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferFileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferFileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WinTestService.TransfFilesSrvRef2.RemoteFileInfo WinTestService.TransfFilesSrvRef2.ITransferFileService.DownloadFile(WinTestService.TransfFilesSrvRef2.DownloadRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public long DownloadFile(ref string Filename, out System.IO.Stream FileByteStream) {
            WinTestService.TransfFilesSrvRef2.DownloadRequest inValue = new WinTestService.TransfFilesSrvRef2.DownloadRequest();
            inValue.Filename = Filename;
            WinTestService.TransfFilesSrvRef2.RemoteFileInfo retVal = ((WinTestService.TransfFilesSrvRef2.ITransferFileService)(this)).DownloadFile(inValue);
            Filename = retVal.Filename;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WinTestService.TransfFilesSrvRef2.RemoteFileInfo> WinTestService.TransfFilesSrvRef2.ITransferFileService.DownloadFileAsync(WinTestService.TransfFilesSrvRef2.DownloadRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<WinTestService.TransfFilesSrvRef2.RemoteFileInfo> DownloadFileAsync(string Filename) {
            WinTestService.TransfFilesSrvRef2.DownloadRequest inValue = new WinTestService.TransfFilesSrvRef2.DownloadRequest();
            inValue.Filename = Filename;
            return ((WinTestService.TransfFilesSrvRef2.ITransferFileService)(this)).DownloadFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WinTestService.TransfFilesSrvRef2.UploadFileResponse WinTestService.TransfFilesSrvRef2.ITransferFileService.UploadFile(WinTestService.TransfFilesSrvRef2.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string Filename, long Length, System.IO.Stream FileByteStream) {
            WinTestService.TransfFilesSrvRef2.RemoteFileInfo inValue = new WinTestService.TransfFilesSrvRef2.RemoteFileInfo();
            inValue.Filename = Filename;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            WinTestService.TransfFilesSrvRef2.UploadFileResponse retVal = ((WinTestService.TransfFilesSrvRef2.ITransferFileService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WinTestService.TransfFilesSrvRef2.UploadFileResponse> WinTestService.TransfFilesSrvRef2.ITransferFileService.UploadFileAsync(WinTestService.TransfFilesSrvRef2.RemoteFileInfo request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<WinTestService.TransfFilesSrvRef2.UploadFileResponse> UploadFileAsync(string Filename, long Length, System.IO.Stream FileByteStream) {
            WinTestService.TransfFilesSrvRef2.RemoteFileInfo inValue = new WinTestService.TransfFilesSrvRef2.RemoteFileInfo();
            inValue.Filename = Filename;
            inValue.Length = Length;
            inValue.FileByteStream = FileByteStream;
            return ((WinTestService.TransfFilesSrvRef2.ITransferFileService)(this)).UploadFileAsync(inValue);
        }
        
        public bool StoreToDb(string filename) {
            return base.Channel.StoreToDb(filename);
        }
        
        public System.Threading.Tasks.Task<bool> StoreToDbAsync(string filename) {
            return base.Channel.StoreToDbAsync(filename);
        }
    }
}
